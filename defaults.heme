(define not (lambda (v) (if v false v)))
(define null (list))
(define null? (lambda (v) (equal? v null)))
(define zero? (lambda (n) (= n 0)))
(define positive? (lambda (n) (> n 0)))
(define negative? (lambda (n) (< n 0)))
(define odd? (lambda (n) (= 1 (% n 2))))
(define even? (lambda (n) (= 0 (% n 2))))
(define range (lambda (start stop step)
    (cond
        ((zero? step) null)
        ((positive? step)
            (if (>= start stop) null (cons start (range (+ start step) stop step))))
        ((negative? step)
            (if (<= start stop) null (cons start (range (+ start step) stop step))))
    )
))

(define map (lambda (f l) (if (null? l) null (cons (f (car l)) (map f (cdr l))))))
(define filter (lambda (p l)
    (cond
        ((null? l) null)
        ((p (car l)) (cons (car l) (filter p (cdr l))))
        (true (filter p (cdr l)))
    )
))

(define foldr (lambda (f d l) (if (null? l) d (f (car l) (foldr f d (cdr l))))))
(define foldl (lambda (f d l) (if (null? l) d (f (foldl f d (cdr l)) (car l)))))

(define caar (lambda (l) (car (car l))))
(define cadr (lambda (l) (car (cdr l))))
(define cdar (lambda (l) (cdr (car l))))
(define cddr (lambda (l) (cdr (cdr l))))
(define caaar (lambda (l) (car (car (car l)))))
(define caadr (lambda (l) (car (car (cdr l)))))
(define cadar (lambda (l) (car (cdr (car l)))))
(define caddr (lambda (l) (car (cdr (cdr l)))))
(define cdaar (lambda (l) (cdr (car (car l)))))
(define cdadr (lambda (l) (cdr (car (cdr l)))))
(define cddar (lambda (l) (cdr (cdr (car l)))))
(define cdddr (lambda (l) (cdr (cdr (cdr l)))))
(define caaaar (lambda (l) (car (car (car (car l))))))
(define caaadr (lambda (l) (car (car (car (cdr l))))))
(define caadar (lambda (l) (car (car (cdr (car l))))))
(define caaddr (lambda (l) (car (car (cdr (cdr l))))))
(define cadaar (lambda (l) (car (cdr (car (car l))))))
(define cadadr (lambda (l) (car (cdr (car (cdr l))))))
(define caddar (lambda (l) (car (cdr (cdr (car l))))))
(define cadddr (lambda (l) (car (cdr (cdr (cdr l))))))
(define cdaaar (lambda (l) (cdr (car (car (car l))))))
(define cdaadr (lambda (l) (cdr (car (car (cdr l))))))
(define cdadar (lambda (l) (cdr (car (cdr (car l))))))
(define cdaddr (lambda (l) (cdr (car (cdr (cdr l))))))
(define cddaar (lambda (l) (cdr (cdr (car (car l))))))
(define cddadr (lambda (l) (cdr (cdr (car (cdr l))))))
(define cdddar (lambda (l) (cdr (cdr (cdr (car l))))))
(define cddddr (lambda (l) (cdr (cdr (cdr (cdr l))))))
